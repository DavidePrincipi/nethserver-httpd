#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use esmith::ConfigDB;
use NethServer::Service;
use File::Path qw(make_path);
use JSON;
use LWP::Simple;

require '/usr/libexec/nethserver/api/lib/helper_functions.pl';

sub is_running
{
    my $service = shift || 0;
    my $db = shift || 0;
    my $s = NethServer::Service->new($service, $db) || return 0;
    return $s->is_running() ? 1 : 0;
}


my $input = readInput();
my $cmd = $input->{'action'};
my @php = ("56","70","71","72","73");
    my @phpSCL = ();
    foreach (@php) {
    push @phpSCL, "rh-php$_-php-fpm";
    push @phpSCL, "php$_-php-fpm";
    }


if ($cmd eq 'live') {
    # 
    # Read stats for dashboard 
    #
    my $ret = {};
    my $cdb = esmith::ConfigDB->open_ro();
    my $vdb = esmith::ConfigDB->open_ro('vhosts');
    my $pdb = esmith::ConfigDB->open_ro('proxypass');

    # Services isRunning
    $ret->{'services'} = {};
    my @services = ("httpd","mysqld",@phpSCL);
    foreach (@services) {
        $ret->{'services'}{$_} = is_running($_, $cdb);
    }
    $ret->{'services'}{'php'} = 1 if (-f '/etc/e-smith/db/configuration/defaults/php/type');

    # vhost/Proxypass list
    my @vhosts = $vdb->get_all();
    my @VhostReverse = $pdb->get_all_by_prop('type' => 'VhostReverse');
    my @ProxyPass = $pdb->get_all_by_prop('type' => 'ProxyPass');

    # Counters
    $ret->{'statistics'}{'virtualhosts'} = scalar @vhosts;
    $ret->{'statistics'}{'VhostReverse'} = $pdb ? scalar @VhostReverse  : 0;
    $ret->{'statistics'}{'ProxyPass'} = $pdb ? scalar @ProxyPass : 0;

    # Packages isInstalled
    my %packages = (
        'virtualhost' => '/etc/e-smith/db/vhosts/defaults/default/type',
        'mysqld' => '/etc/e-smith/db/configuration/defaults/mysqld/type',
        'httpd' => '/etc/e-smith/db/configuration/defaults/httpd/type',
        'php' => '/etc/e-smith/db/configuration/defaults/php/type',
    );
    foreach (keys %packages) {
        $ret->{'packages'}{$_} = (-e $packages{$_}) ? 1 : 0;
    }


    foreach my $v (@phpSCL) {
        if (-f "/etc/e-smith/db/configuration/defaults/$v/type"){
            $ret->{'packages'}{"$v"} = 1;
        } else {
            $ret->{'packages'}{"$v"} = 0;
        }
    }


    # lamp version
    my $http = `/usr/sbin/httpd -v`;
    my $httpVersion = $1 if ($http =~/Apache\/([\d+\.]+)/gi);
    $ret->{'versions'}{'httpd'} = $httpVersion;

    my $php = `/usr/bin/php -v`;
    my $phpVersion = $1 if ($php =~/PHP\ ([\d+\.]+)/gi);
    $ret->{'versions'}{'php'} = $phpVersion;

    foreach my $v (@phpSCL) {
        if (-f "/etc/e-smith/db/configuration/defaults/$v/type"){
            my $scl = $v;
            $scl =~ s/-php-fpm//;
            my $php = `scl enable $scl 'php -v'`;
            my $phpVersion = $1 if ($php =~/PHP\ ([\d+\.]+)/gi);
            $ret->{'versions'}{"$v"} = $phpVersion;
        }
    }

    if (-f '/etc/e-smith/db/configuration/defaults/mysqld/type'){
        my $mysql = `/usr/bin/mysql -V`;
        my $mysqlVersion = $1 if ($mysql =~/Distrib\ ([\d+\.]+[\-\w]+)/gi);
        $ret->{'versions'}{'mysqld'} = $mysqlVersion;
    }

    print encode_json($ret);

} elsif ($cmd eq 'apacheStatus') {
    my $url="http://localhost/server-status?auto";
    my $server_status = get($url);
    my $ret = {};

    if (! $server_status) {
        error('NotReachable',"Can't access $url Check apache configuration");
        exit(1);
    }

    my $total_accesses = $1 if ($server_status =~ /Total\ Accesses:\ ([\d\.]+)/ig)||0;
    my $total_kbytes = $1 if ($server_status =~ /Total\ kBytes:\ ([\d\.]+)/gi);
    my $uptime = $1 if ($server_status =~ /Uptime:\ ([\d\.]+)/gi);
    my $reqpersec = $1 if ($server_status =~ /ReqPerSec:\ ([\d\.]+)/gi);
    my $bytespersec = $1 if ($server_status =~ /BytesPerSec:\ ([\d\.]+)/gi);
    my $bytesperreq = $1 if ($server_status =~ /BytesPerReq:\ ([\d\.]+)/gi);
    my $busyworkers = $1 if ($server_status =~ /BusyWorkers:\ ([\d\.]+)/gi);
    my $idleworkers = $1 if ($server_status =~ /IdleWorkers:\ ([\d\.]+)/gi);
    my $totalworkers = $1 if ($server_status =~ /Scoreboard:\ (.+)/gi);

    #count the number of occurence to make a graph
    my $startingworkers = $totalworkers =~ tr/S//;
    my $readingworkers = $totalworkers =~ tr/R//;
    my $sendingreplyworkers = $totalworkers =~ tr/W//;
    my $keepaliveworkers = $totalworkers =~ tr/K//;
    my $dnslookupworkers = $totalworkers =~ tr/D//;
    my $closingworkers = $totalworkers =~ tr/C//;
    my $loggingworkers = $totalworkers =~ tr/L//;
    my $gracefullyworkers = $totalworkers =~ tr/G//;
    my $idlecleanupworkers = $totalworkers =~ tr/I//;
    my $waitingworkers = $totalworkers =~ tr/\.//;

    $ret->{'TotalAccess'} = $total_accesses;
    $ret->{'Total_kbytes'} = $total_kbytes;
    $ret->{'Uptime'} = $uptime;
    $ret->{'ReqPerSec'} = $reqpersec;
    $ret->{'BytesPerSec'} = $bytespersec;
    $ret->{'BytesPerReq'} = $bytesperreq;
    $ret->{'statistics'}{'BusyWorkers'} = $busyworkers;
    $ret->{'statistics'}{'IdleWorkers'} = $idleworkers;
    $ret->{'statistics'}{'StartingWorkers'} = $startingworkers;
    $ret->{'statistics'}{'ReadingWorkers'} = $readingworkers;
    $ret->{'statistics'}{'ReplyingWorkers'} = $sendingreplyworkers;
    $ret->{'statistics'}{'KeepAliveWorkers'} = $keepaliveworkers;
    $ret->{'statistics'}{'DnsLookupWorkers'} = $dnslookupworkers;
    $ret->{'statistics'}{'ClosingWorkers'} = $closingworkers;
    $ret->{'statistics'}{'LoggingWorkers'} = $loggingworkers;
    $ret->{'statistics'}{'GraceFullyFinishingWorkers'} = $gracefullyworkers;
    $ret->{'statistics'}{'IdleCleanupWorkers'} = $idlecleanupworkers;
    $ret->{'statistics'}{'WaitingWorkers'} = $waitingworkers;


} else {
    error();
}
