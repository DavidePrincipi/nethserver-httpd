#!/usr/bin/perl

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::AccountsDB;
use NethServer::Migrate qw(parseShadow);
use esmith::DB::db;
use Data::Dumper;

my $event = shift;
my $sourceDir = shift;
my $esmithDbDir = '/home/e-smith/db';
my $errors = 0;

if( ! $event ) {
    die("Missing event argument!\n");
}

if( ! $sourceDir ) {
    die("Missing sourceDir argument!\n");
}

my $srcAccountsDb = esmith::AccountsDB->open_ro(join('', $sourceDir, $esmithDbDir, '/accounts')) or die("Could not open source accounts database in $sourceDir \n");
my $dstAccountsDb = esmith::AccountsDB->open('accounts') or die("Could not open destination account db\n");
my $shadowDb = parseShadow($sourceDir . '/etc/shadow') or $errors++;
my $srcDomainsDb = esmith::DB::db->open_ro(join('', $sourceDir, $esmithDbDir, '/domains')) or die("Could not open source domains database in $sourceDir \n");

my %rootIbay = ();

# Find ibays set as host DocumentRoot.  NethService has a domain-ibay
# association; NethServer has a virtualhost-ibay association. The
# relations must be fixed manually.  Anyway, most of ibays can be
# visible from any virtualhost by setting HttpVirtualHost prop to "__ANY__".
foreach my $srcDomain ($srcDomainsDb->get_all_by_prop(type => 'domain')) {   
    my $ibayName = $srcDomain->prop('Content');
    $rootIbay{$ibayName} = 1;
}

my %publicAccessMap = (
    'global' => {
	HttpStatus => 'enabled',
	HttpAccess => 'public',
	HttpPasswordStatus => 'disabled',
	OtherAccess => 'r',
    },
    'global-pw' => {
	HttpStatus => 'enabled',
	HttpAccess => 'public',
	HttpPasswordStatus => 'enabled',
	OtherAccess => 'r',
    },
    # The 'global-pw-remote' case is currently not implemented in
    # NethServer and is mapped as 'global-pw'. The reason is we do not
    # want make distinctions between internal/external connections:
    'global-pw-remote' => {
	HttpStatus => 'enabled',
	HttpAccess => 'public',
	HttpPasswordStatus => 'enabled',
	OtherAccess => 'r',
    },
    'local' => {
	HttpStatus => 'enabled',
	HttpAccess => 'private',
	HttpPasswordStatus => 'disabled',
	OtherAccess => 'r',
    },
    'local-pw' => {
	HttpStatus => 'enabled',
	HttpAccess => 'private',
	HttpPasswordStatus => 'enabled',
	OtherAccess => 'r',
    },
    'none' => {
	HttpStatus => 'disabled',
	HttpAccess => 'public',
	HttpPasswordStatus => 'disabled',
    },   
    'default' => {
	HttpStatus => 'enabled',
	HttpAccess => 'private',
	HttpPasswordStatus => 'disabled',
    }
    );


foreach my $srcIbay ($srcAccountsDb->ibays()) {
    my $ibayName = $srcIbay->key;
    my $dstIbay = $dstAccountsDb->get($ibayName);

    if( ! $dstIbay) {
	warn("[ERROR] ibay $ibayName was not migrated by nethserver-ibays module?!\n");
	$errors++;
	next;
    }

    my %access = ();
    my $ibayPassword = '';

    if(defined $publicAccessMap{$srcIbay->prop('PublicAccess')}) {
	%access = %{$publicAccessMap{$srcIbay->prop('PublicAccess')}};
    } else {
	%access = %{$publicAccessMap{'default'}};
    }

    if(defined $shadowDb->{$ibayName}) {
	$ibayPassword = '{CRYPT}' . $shadowDb->{$ibayName}->{pwdp};
    }

    #   Assign the ibay to ANY virtualhost. This must be fixed
    # manually, but should do the job in most cases.  Ibays set as
    # Content of a NethService domain are configured as DocumentRoot
    # in NethServer.  If more than one ibay want to be the
    # DocumentRoot of the same host a warning message is generated by
    # the httpd.conf template.
    #
    #   A special "migration" profile is assigned to the ibay to
    # configure files/ cgi-bin/ and html/ subdirectories aliases.
    $dstIbay->merge_props(
	HttpVirtualHost => '__ANY__',
	HttpPasswordValue => $ibayPassword,
	HttpAliasType => defined $rootIbay{$ibayName} ? 'root' : 'default',	
	HttpProfileType => 'migration',
        HttpCgiBinStatus => $srcIbay->prop('CgiBin') || 'disabled',
	%access
	);
	
}

if($errors > 0) {
    warn "[WARNING] $errors error(s) occurred in $0 action\n";
    exit(1);
}

# action ends:
exit(0);
